/*
 * PVPC schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package redata_api_consumer

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/AigisCorp/redata-api-consumer/app/redata"
	"github.com/gin-gonic/gin"
	log "github.com/sirupsen/logrus"
)

type ChargeAPI struct {
}

// Get /api/v1/charge
// Charging hours
func (api *ChargeAPI) Charge(c *gin.Context) {
	responseBody := redata.GetMercadosPreciosTempoReal()
	data := redata.MercadosPreciosTempoReal{}
	err := json.Unmarshal(responseBody, &data)
	if err != nil {
		log.Fatal(err)
	}

	prices := data.Included[0].Attributes.Values
	var total float64
	for v := range prices {
		total = total + data.Included[0].Attributes.Values[v].Value
	}
	mean := total / 24

	log.Info(mean)

	var charge bool
	t := time.Now()
	currentHour := t.Hour()
	priceCurrentHour := data.Included[0].Attributes.Values[currentHour].Value
	if priceCurrentHour < mean {
		charge = true
		log.Info(fmt.Sprintf("Current price %.2f, is under the mean price %.2f", priceCurrentHour, mean))
	} else {
		charge = false
		log.Info(fmt.Sprintf("Current price %.2f, is over the mean price %.2f", priceCurrentHour, mean))
	}

	// Your handler implementation
	c.JSON(200, gin.H{"Charge": charge})
}
