/*
 * PVPC schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package redata_api_consumer

import (
	"encoding/json"
	"sort"
	"strconv"

	"github.com/AigisCorp/redata-api-consumer/app/redata"
	"github.com/gin-gonic/gin"
	log "github.com/sirupsen/logrus"
)

type CheapAPI struct {
}

// Get /api/v1/cheap
// Cheap hours
func (api *CheapAPI) GetCheap(c *gin.Context) {
	queryHours, err := strconv.Atoi(c.Query("hours"))
	if err != nil {
		c.Abort()
		c.JSON(500, gin.H{"Error": "Missing hours query param or it can't be parsed properly."})
		return
	}
	if int(queryHours) > 24 {
		c.Abort()
		c.JSON(500, gin.H{"Error": "A day only has 24 hours!"})
		return
	}
	responseBody := redata.GetMercadosPreciosTempoReal()
	data := redata.MercadosPreciosTempoReal{}
	err = json.Unmarshal(responseBody, &data)
	if err != nil {
		log.Fatal(err)
	}

	prices := data.Included[0].Attributes.Values
	sort.Slice(prices, func(i, j int) bool {
		return prices[i].Value < prices[j].Value
	})

	type price struct {
		Price    float64 `json:"price"`
		Datetime string  `json:"datetime"`
	}
	var hours []price
	var i int
	for i = 0; i < queryHours; i++ {
		hours = append(hours,
			price{Price: data.Included[0].Attributes.Values[i].Value, Datetime: data.Included[0].Attributes.Values[i].Datetime.String()})
	}

	// Your handler implementation
	c.JSON(200, gin.H{"Hours": hours})
}
