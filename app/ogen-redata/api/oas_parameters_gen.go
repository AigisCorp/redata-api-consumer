// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetCheapParams is parameters of getCheap operation.
type GetCheapParams struct {
	// The number of hours to retrieve.
	Hours uint8
}

func unpackGetCheapParams(packed middleware.Parameters) (params GetCheapParams) {
	{
		key := middleware.ParameterKey{
			Name: "hours",
			In:   "query",
		}
		params.Hours = packed[key].(uint8)
	}
	return params
}

func decodeGetCheapParams(args [0]string, argsEscaped bool, r *http.Request) (params GetCheapParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: hours.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hours",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint8(val)
				if err != nil {
					return err
				}

				params.Hours = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hours",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
